namespace Mega.Tests
{
	using System.Numerics;
	using Microsoft.VisualStudio.TestTools.UnitTesting;

	[TestClass]
	public sealed class RsaTests
	{
		[TestMethod]
		public void RsaDecrypt_SeemsToWork()
		{
			var encryptedData = Algorithms.MpiToBytes(Algorithms.Base64Decode("CABGgukAt_9Zn7vt5SdvYrnwc_pAPHOTU4rvMCGxF4J1vmSTvYFsnQjuK19SitbWISXVoaXcYncXfdB4URaT9ZuXg3gKxli9bLsZ2CYPVU2eMVZ7wE-UmqRzEsClB-YDoa2eumPVtiSqkjLXjhgVwk1gXSA3020E1rOxtfxO-U4gvvXdl-LLNOq518oahvgW3I2wfTbtagm0V8RPvcaMiU0UWv5F_EQLxIyKYNnjawcGPK6gOwV_1fvrk6cbB4x6M00jN5B8xQwmcuzUJzl6vUY-DwdIjtJIGwxHk19uHDUQ2xZwuz8r2-0lDARaUW6Nm1JwTbfq9tvHJN0rLz_7F3UX"));

			var expectedResult = Algorithms.Base64Decode("q0h-YFvMKbWF6pAWDdAb8HNvRUVFNkkwOGxRbUlRtEwLF-v75FD2BmaZfqvZpiPmzwp5rV93XWyjVZD-95K4oP_7kc2CPo3VK7Wd8qaVzhuwTXAenksAkCIEgyHWpjpGkLRpAlfujhioHBAzYOavn9YZLQqcfHWfnSeiTGa2TsQj7yGlAVrKcPZ-sEQXykKPcJ2jEhGNMqmGC-SPghDGqv_-hJqSicmt-mwHVAsSfYBctlAqLFkzkEk1UQWG5ja-M25xpKmxl5yau2M7aTJNHmjcKhpRLzLunGv1t2eSCJ6q2HknZgDDUGZGM7SLYbeA3yAO7pFmy-mITZKEzIjl");

			var p = BigInteger.Parse("148896287039501678969147386479458178246000691707699594019852371996225136011987881033904404601666619814302065310828663028471342954821076961960815187788626496609581811628527023262215778397482476920164511192915070597893567835708908996890192512834283979142025668876250608381744928577381330716218105191496818716653");

			var q = BigInteger.Parse("119975764355551220778509708561576785383941026741388506773912560292606151764383332427604710071170171329268379604135341015979284377183953677973647259809025842247294479469402755370769383988530082830904396657573472653613365794770434467132057189606171325505138499276437937752474437953713231209677228298628994462467");

			var d = BigInteger.Parse("1050820343956927572934612076472252685571974129712443554815513287152988684406403906076515668704928544975690979813088696470039543056941876104251006278039055944306922545547445651931155520381669260360756401313575997705078427390694344434682513918993867897491831570971092873803705042510495766113744352563287063082924679334868600466200729287883561166127597013570469069087493218333754090415201625690412387092800057802674340482431338713902173315497845649798915108362617461018268539059230386716408633534832438888093711421967131642544319111454229844308951507451138039552416804729190939602115000097721815735491982407386629599049");

			var rsaPrivateKey = new Algorithms.RsaPrivateKey(p, q, d);

			var decryptedData = Algorithms.RsaDecrypt(encryptedData, rsaPrivateKey);

			CollectionAssert.AreEqual(expectedResult, decryptedData);
		}

		[TestMethod]
		public void RsaEncrypt_SeemsToWork()
		{
			var clearData = Algorithms.Base64Decode("q0h-YFvMKbWF6pAWDdAb8HNvRUVFNkkwOGxRbUlRtEwLF-v75FD2BmaZfqvZpiPmzwp5rV93XWyjVZD-95K4oP_7kc2CPo3VK7Wd8qaVzhuwTXAenksAkCIEgyHWpjpGkLRpAlfujhioHBAzYOavn9YZLQqcfHWfnSeiTGa2TsQj7yGlAVrKcPZ-sEQXykKPcJ2jEhGNMqmGC-SPghDGqv_-hJqSicmt-mwHVAsSfYBctlAqLFkzkEk1UQWG5ja-M25xpKmxl5yau2M7aTJNHmjcKhpRLzLunGv1t2eSCJ6q2HknZgDDUGZGM7SLYbeA3yAO7pFmy-mITZKEzIjl");

			var expectedResult = Algorithms.MpiToBytes(Algorithms.Base64Decode("CABGgukAt_9Zn7vt5SdvYrnwc_pAPHOTU4rvMCGxF4J1vmSTvYFsnQjuK19SitbWISXVoaXcYncXfdB4URaT9ZuXg3gKxli9bLsZ2CYPVU2eMVZ7wE-UmqRzEsClB-YDoa2eumPVtiSqkjLXjhgVwk1gXSA3020E1rOxtfxO-U4gvvXdl-LLNOq518oahvgW3I2wfTbtagm0V8RPvcaMiU0UWv5F_EQLxIyKYNnjawcGPK6gOwV_1fvrk6cbB4x6M00jN5B8xQwmcuzUJzl6vUY-DwdIjtJIGwxHk19uHDUQ2xZwuz8r2-0lDARaUW6Nm1JwTbfq9tvHJN0rLz_7F3UX"));

			var n = BigInteger.Parse("17863945847267768739888405300028295654723560205111540431863725881600807634908866403300766367983785264586746656822507839990672231968011893772267106726663951053217683274306576082829643846488377426132858822330791960986333265641803855389602736622895754257361136706508578854662985722678428023933653993575880072409988420744161260825160054989061574787799090949147062275281149643962650824834798850198519695250437773789034233116296762180787573695468406686516019289762149176167441455104846352811931932478164020848662002023929781174760358525201250817274425329109801977038249848548934519370174368192365429429259034415698516362951");

			var e = Algorithms.RsaE;

			var key = new Algorithms.RsaPublicKey(n, e);

			var encryptedData = Algorithms.RsaEncrypt(clearData, key);

			CollectionAssert.AreEqual(expectedResult, encryptedData);
		}
	}
}